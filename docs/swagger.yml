openapi: '3.0.2'
info:
  title: Insurance Api
  version: '1.0'
servers:
  - url: https://api.server.test/v1
paths:
  /insurance:
    get:
      tags:
      - Insurances
      summary: Get a list of insurances
      operationId: getInsurances
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Insurance'
                      
    post:
      tags:
       - Insurances
      summary: Creates a new insurance
      operationId: createInsurance
      requestBody:
        description: The insurance to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/InsurancePost'

      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Insurance'
  /insurance/{id}:
    parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
    get:
      tags:
      - Insurances
      summary: Get a single insurance
      operationId: getInsurance
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Insurance'
        404:
          description: Insurance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    put:
      tags:
      - Insurances
      summary: Updates a single insurance
      operationId: updateInsurance
      requestBody:
        description: the properties to change
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/InsurancePost'

      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Insurance'
        404:
          description: Insurance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    delete:
      tags:
      - Insurances
      summary: Deletes a Insurance
      operationId: deleteInsurance
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Insurance'
        404:
          description: Insurance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
  /customer:
    get:
      tags:
      - Customers
      summary: Get a list of customers
      operationId: getCustomers
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
                      
    post:
      tags:
       - Customers
      summary: Creates a new customer
      operationId: createCustomer
      requestBody:
        description: The customer to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CustomerPost'

      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
  /customer/{id}:
    parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
    get:
      tags:
      - Customers
      summary: Get a single customer
      operationId: getCustomer
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          description: Customer not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    put:
      tags:
      - Customers
      summary: Updates a single customer
      operationId: updateCustomer
      requestBody:
        description: the properties to change
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CustomerPost'

      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          description: Customer not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    delete:
      tags:
      - Customers
      summary: Deletes a Customer
      operationId: deleteCustomer
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          description: Customer not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
  /signup:
    post:
      tags:
      - user
      summary: Create user
      description: User get created
      operationId: createUser
      requestBody:
        description: User to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: invalid input data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
  /login:
    post:
      tags:
      - user
      summary: Logs in an user
      description: Logs in user
      operationId: loginUser
      requestBody:
        description: Access Token
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserToken'
        400:
          description: invalid input data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
components:
  schemas:
    Insurance:
      type: object
      required:
        - _id
        - name
        - customerId
        - type
        - validFrom
        - expires
        - price
        - identification
      properties:
        _id:
          type: string
          example: 61f2f7cb342e20816b468f32
        name:
          type: string
          example: Alfredo Dominguez - Auto
        customerId:
          type: string
          example: 61f2f7cb342e20816b468f32
        type:
          type: string
          example: Car
          enum:
            - Car
            - House
            - Personal
            - Phone
            - Bike
            - Purse
        validFrom:
          type: string
          format: date-time
          example: 08/08/2022 15:44
        expires:
          type: string
          format: date-time
          example: 08/12/2022 15:44
        price:
          type: number
          format: decimal
          example: 120000.12
        identification:
          type: string
          example: AE 222 PF
    InsurancePost:
      type: object
      required:
        - name
        - customerId
        - type
        - validFrom
        - expires
        - price
        - identification
      properties:
        name:
          type: string
          example: Alfredo Dominguez - Auto
        customerId:
          type: string
          example: 61f2f7cb342e20816b468f32
        type:
          type: string
          example: Car
          enum:
            - Car
            - House
            - Personal
            - Phone
            - Bike
            - Purse
        validFrom:
          type: string
          format: date-time
          example: 08/08/2022 15:44
        expires:
          type: string
          format: date-time
          example: 08/12/2022 15:44
        price:
          type: number
          format: decimal
          example: 120000.12
        identification:
          type: string
          example: AE 222 PF
    Customer:
      type: object
      required:
        - _id
        - firstName
        - lastName
        - birthDate
        - email
        - phone
        - userId
      properties:
        _id:
          type: string
          example: 61f2f7cb342e20816b468f32
        firstName:
          type: string
          example: Alfredo
        lastName:
          type: string
          example: Dominguez
        birthDate: 
          type: string
          format: date-time
          example: 08/08/1989 15:44
        email:
          type: string
          format: email
          example: alfredo.dominguez@gmail.com
        phone:
          type: string
          format: phone
          example: +54 9 351 2 582919
        userId:
          type: string
          example: 61f2f7cb342e20816b468f32
    CustomerPost:
      type: object
      required:
        - firstName
        - lastName
        - birthDate
        - email
        - phone
        - userId
      properties:
        firstName:
          type: string
          example: Alfredo
        lastName:
          type: string
          example: Dominguez
        birthDate: 
          type: string
          format: date-time
          example: 08/08/1989 15:44
        email:
          type: string
          format: email
          example: alfredo.dominguez@gmail.com
        phone:
          type: string
          format: phone
          example: +54 9 351 2 582919
        userId:
          type: string
          example: 61f2f7cb342e20816b468f32

    UserPost:
      type: object
      properties:
        name:
          type: string
          example: 'Rodrigo Saez'
        email:
          type: string
          example: 'rodrigo@gmail.com'
        password:
          type: string
          example: 'asjdiajdiasj'
      xml:
        name: User
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: 'rodrigo@gmail.com'
        password:
          type: string
          example: 'asjdiajdiasj'
      xml:
        name: User
    User:
      type: object
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: 'Rodrigo Saez'
        email:
          type: string
          example: 'rodrigo@gmail.com'
        password:
          type: string
          example: 'asjdiajdiasj'
      xml:
        name: User
    UserToken:
      type: object
      properties:
        token:
          type: string
          example: 'eaahsusahudahsudhajdsiajdsi'
    RequestError:
      type: object
      properties:
        message:
          type: string
          example: 'NOT_FOUND'
        severity:
          example: 'HIGH'
          type: string